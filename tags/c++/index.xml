<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on /dev/null</title>
    <link>https://nazavode.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nazavode.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Look ma, no CUDA! Programming GPUs with modern C&#43;&#43; and SYCL</title>
      <link>https://nazavode.github.io/blog/sycl/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/sycl/</guid>
      <description>&lt;p&gt;Back in 2009 when I began doing real work with GPGPUs and &lt;a href=&#34;https://en.wikipedia.org/wiki/CUDA&#34;&gt;CUDA&lt;/a&gt;
in the context of large scale HPC simulations, the developer experience was &lt;em&gt;dreadful&lt;/em&gt;.
Sure, for the right algorithm and after lots of blood and tears, performances usually
turned out excellent. But before production, comes the poor developer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding performance with Google Benchmark @ Italian C&#43;&#43; Meetup</title>
      <link>https://nazavode.github.io/blog/google-benchmark/</link>
      <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/google-benchmark/</guid>
      <description>&lt;p&gt;During the last meetup of the &lt;a href=&#34;https://twitter.com/italiancpp&#34;&gt;Italian C++ Community&lt;/a&gt; in
Modena, Italy I had the chance to give a talk about profiling C++ code. The whole game
boils down to &lt;em&gt;understanding&lt;/em&gt; what&amp;rsquo;s going on when you have to cope with &lt;em&gt;very smart&lt;/em&gt;
optimizing compilers, NUMA architectures and speculative, superscalar CPUs: in this quest
for knowledge we are lucky enough to have some extremely useful tools like the &lt;em&gt;holy&lt;/em&gt;
&lt;code&gt;perf&lt;/code&gt; and micro benchmarks, using the excellent
&lt;a href=&#34;https://github.com/google/benchmark&#34;&gt;Google Benchmark&lt;/a&gt; for instance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aliasing Explained (Part 1)</title>
      <link>https://nazavode.github.io/blog/aliasing/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/aliasing/</guid>
      <description>&lt;p&gt;Since my job involves a lot of HPC stuff and performance-obsessed code, one of
the first topics I had to dive into was &lt;strong&gt;aliasing in the C standard&lt;/strong&gt;. I
found out that it is a subtle topic, quite obscure and very often
overlooked even by the most experienced programmers. This post is an attempt
to clarify the concept of &lt;em&gt;aliasing&lt;/em&gt;, why should we care, how it impacts
the code generated by the compiler and how can we master it with no hassle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Idiomatic C&#43;&#43;</title>
      <link>https://nazavode.github.io/blog/idiomatic-cpp/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/idiomatic-cpp/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just &lt;a href=&#34;http://www.slideshare.net/fficarelli/idiomatic-c&#34;&gt;uploaded&lt;/a&gt; a minimal collection of most wanted and widely accepted idioms and coding conventions
for C++ development presented along with examples and comments. The lecture targets performance oriented codes so
emphasis is on performance-friendly techniques.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>