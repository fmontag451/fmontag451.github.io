<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on /dev/null</title>
    <link>https://nazavode.github.io/categories/dev/</link>
    <description>Recent content in Dev on /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nazavode.github.io/categories/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Aliasing Explained (Part 1)</title>
      <link>https://nazavode.github.io/blog/aliasing/</link>
      <pubDate>Sun, 26 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/aliasing/</guid>
      <description>&lt;p&gt;Since my job involves a lot of HPC stuff and performance-obsessed code, one of
the first topics I had to dive into was &lt;strong&gt;aliasing in the C standard&lt;/strong&gt;. I
found out that it is a subtle topic, quite obscure and very often
overlooked even by the most experienced programmers. This post is an attempt
to clarify the concept of &lt;em&gt;aliasing&lt;/em&gt;, why should we care, how it impacts
the code generated by the compiler and how can we master it with no hassle.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Idiomatic C&#43;&#43;</title>
      <link>https://nazavode.github.io/blog/idiomatic-cpp/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/idiomatic-cpp/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just &lt;a href=&#34;http://www.slideshare.net/fficarelli/idiomatic-c&#34;&gt;uploaded&lt;/a&gt; a minimal collection of most wanted and widely accepted idioms and coding conventions
for C++ development presented along with examples and comments. The lecture targets performance oriented codes so
emphasis is on performance-friendly techniques.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Documentation with Doxygen and CMake: a (slightly) improved approach</title>
      <link>https://nazavode.github.io/blog/cmake-doxygen-improved/</link>
      <pubDate>Sat, 19 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://nazavode.github.io/blog/cmake-doxygen-improved/</guid>
      <description>&lt;p&gt;After days of hard work we ended up with our lovely crafted code base, a
portable CMake build system and we are now facing the task to generate a proper
Doxygen documentation for our anxious customer. The solution, widely adopted,
seems to be the one and only that can be found while googling and, to me, looks
not so neat. So I tried to come up with a different approach.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>